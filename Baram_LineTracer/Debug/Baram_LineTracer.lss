
Baram_LineTracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000c94  00000d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800110  00800110  00000d38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001031  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac0  00000000  00000000  00001e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000883  00000000  00000000  0000293d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000031c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000582  00000000  00000000  000033e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006fb  00000000  00000000  0000396a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004065  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	6c c1       	rjmp	.+728    	; 0x2de <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	71 c1       	rjmp	.+738    	; 0x30c <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 35       	cpi	r26, 0x56	; 86
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	00 d3       	rcall	.+1536   	; 0x6c4 <main>
  c4:	e5 c5       	rjmp	.+3018   	; 0xc90 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <UART1_INIT>:
}

unsigned char UART1_Receive(){ // UART 송신
	while(!(UCSR1A & (1<<RXC1)));
	return UDR1;
}
  c8:	88 e0       	ldi	r24, 0x08	; 8
  ca:	81 bb       	out	0x11, r24	; 17
  cc:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  dc:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  e0:	87 e6       	ldi	r24, 0x67	; 103
  e2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  e6:	08 95       	ret

000000e8 <UART1_Transmit>:
  e8:	eb e9       	ldi	r30, 0x9B	; 155
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	90 81       	ld	r25, Z
  ee:	95 ff       	sbrs	r25, 5
  f0:	fd cf       	rjmp	.-6      	; 0xec <UART1_Transmit+0x4>
  f2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  f6:	08 95       	ret

000000f8 <Timer2_INIT>:

void Timer2_INIT(){
	TCCR2 = (0<<WGM21) | (0<<WGM20) | (0<<COM21) | (0<<COM20) | (1<<CS22) | (0<<CS21) | (0<<CS20);
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	85 bd       	out	0x25, r24	; 37
	// Nomal, Normal port operation, Clear OC2 on compare match, prescaler 256
	TIMSK = (1<<TOIE2); // T/C2 Overflow Interrupt Enable
  fc:	80 e4       	ldi	r24, 0x40	; 64
  fe:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 131;
 100:	83 e8       	ldi	r24, 0x83	; 131
 102:	84 bd       	out	0x24, r24	; 36
 104:	08 95       	ret

00000106 <BUTTON_INIT>:
}

void BUTTON_INIT()
{
	DDRD = 0x00; // PD핀 입력
 106:	11 ba       	out	0x11, r1	; 17
	
	EIMSK = (1<<INT0); // Interrupt 0번 활성화
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	89 bf       	out	0x39, r24	; 57
	EICRA = (1<<ISC01) | (0<< ISC00); // falling edge 때 실행
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 112:	08 95       	ret

00000114 <MOTOR_INIT>:
}

void MOTOR_INIT(){ // 모터 초기 설정
	DDRE = 0x0f;
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xff;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	87 bb       	out	0x17, r24	; 23
	
	TCCR1A = (1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (1<<WGM11);
 11c:	82 ea       	ldi	r24, 0xA2	; 162
 11e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
 120:	89 e1       	ldi	r24, 0x19	; 25
 122:	8e bd       	out	0x2e, r24	; 46
	// channel A와 B non-inverting mode, Fast PWM, clk 1 (No prescaling)
	
	ICR1 = 4999;// TOP
 124:	87 e8       	ldi	r24, 0x87	; 135
 126:	93 e1       	ldi	r25, 0x13	; 19
 128:	97 bd       	out	0x27, r25	; 39
 12a:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;
 12c:	1b bc       	out	0x2b, r1	; 43
 12e:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
 130:	19 bc       	out	0x29, r1	; 41
 132:	18 bc       	out	0x28, r1	; 40
 134:	08 95       	ret

00000136 <MOTOR_Direction>:
}

int MOTOR_Direction(double Weight, int line, int uturn){ // 모터 구동
 136:	cf 92       	push	r12
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	6b 01       	movw	r12, r22
 148:	7c 01       	movw	r14, r24
 14a:	ea 01       	movw	r28, r20
 14c:	89 01       	movw	r16, r18
	if(line > 0) // 수발광 센서 하나라도 검은선에 걸친 경우
 14e:	1c 16       	cp	r1, r28
 150:	1d 06       	cpc	r1, r29
 152:	0c f0       	brlt	.+2      	; 0x156 <MOTOR_Direction+0x20>
 154:	a3 c0       	rjmp	.+326    	; 0x29c <MOTOR_Direction+0x166>
	{
		if((uturn > 0) && (line > 5)) // 결승점 세개 선에서 정지한 후에 검은줄을 만난 경우 유턴
 156:	12 16       	cp	r1, r18
 158:	13 06       	cpc	r1, r19
 15a:	b4 f4       	brge	.+44     	; 0x188 <MOTOR_Direction+0x52>
 15c:	46 30       	cpi	r20, 0x06	; 6
 15e:	51 05       	cpc	r21, r1
 160:	9c f0       	brlt	.+38     	; 0x188 <MOTOR_Direction+0x52>
		{
			PORTE = 0x0a;
 162:	8a e0       	ldi	r24, 0x0A	; 10
 164:	83 b9       	out	0x03, r24	; 3
			OCR1A = 4999 * 0.48; // 오른쪽
 166:	8f e5       	ldi	r24, 0x5F	; 95
 168:	99 e0       	ldi	r25, 0x09	; 9
 16a:	9b bd       	out	0x2b, r25	; 43
 16c:	8a bd       	out	0x2a, r24	; 42
			OCR1B = 4999 * 0.48; // 왼쪽
 16e:	99 bd       	out	0x29, r25	; 41
 170:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	89 ed       	ldi	r24, 0xD9	; 217
 176:	9f e2       	ldi	r25, 0x2F	; 47
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <MOTOR_Direction+0x42>
 180:	00 c0       	rjmp	.+0      	; 0x182 <MOTOR_Direction+0x4c>
 182:	00 00       	nop
			_delay_ms(980);
			uturn = -1; // uturn에 -1값을 넣어 반환할 것임
 184:	0f ef       	ldi	r16, 0xFF	; 255
 186:	1f ef       	ldi	r17, 0xFF	; 255
		}
		
		if(line == 1) Weight *= 2; // 줄이 2줄 미만, 1줄만 걸친 경우 가중치 2배
 188:	c1 30       	cpi	r28, 0x01	; 1
 18a:	d1 05       	cpc	r29, r1
 18c:	39 f4       	brne	.+14     	; 0x19c <MOTOR_Direction+0x66>
 18e:	a7 01       	movw	r20, r14
 190:	96 01       	movw	r18, r12
 192:	c7 01       	movw	r24, r14
 194:	b6 01       	movw	r22, r12
 196:	3b d3       	rcall	.+1654   	; 0x80e <__addsf3>
 198:	6b 01       	movw	r12, r22
 19a:	7c 01       	movw	r14, r24
		PORTE = 0x06; // 전진 설정
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	83 b9       	out	0x03, r24	; 3
		if((Weight < 3) && (Weight > -3)) // 가중치가 -2 ~ +2 인 경우
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e4       	ldi	r20, 0x40	; 64
 1a6:	50 e4       	ldi	r21, 0x40	; 64
 1a8:	c7 01       	movw	r24, r14
 1aa:	b6 01       	movw	r22, r12
 1ac:	94 d3       	rcall	.+1832   	; 0x8d6 <__cmpsf2>
 1ae:	88 23       	and	r24, r24
 1b0:	84 f4       	brge	.+32     	; 0x1d2 <MOTOR_Direction+0x9c>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	40 e4       	ldi	r20, 0x40	; 64
 1b8:	50 ec       	ldi	r21, 0xC0	; 192
 1ba:	c7 01       	movw	r24, r14
 1bc:	b6 01       	movw	r22, r12
 1be:	da d4       	rcall	.+2484   	; 0xb74 <__gesf2>
 1c0:	18 16       	cp	r1, r24
 1c2:	3c f4       	brge	.+14     	; 0x1d2 <MOTOR_Direction+0x9c>
		{
			OCR1B = 4999 * 0.45; // 왼쪽
 1c4:	89 ec       	ldi	r24, 0xC9	; 201
 1c6:	98 e0       	ldi	r25, 0x08	; 8
 1c8:	99 bd       	out	0x29, r25	; 41
 1ca:	88 bd       	out	0x28, r24	; 40
			OCR1A = 4999 * 0.45; // 오른쪽
 1cc:	9b bd       	out	0x2b, r25	; 43
 1ce:	8a bd       	out	0x2a, r24	; 42
 1d0:	65 c0       	rjmp	.+202    	; 0x29c <MOTOR_Direction+0x166>
		}
		else
		{
			if(Weight < 0) // 우회전
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	a9 01       	movw	r20, r18
 1d8:	c7 01       	movw	r24, r14
 1da:	b6 01       	movw	r22, r12
 1dc:	7c d3       	rcall	.+1784   	; 0x8d6 <__cmpsf2>
 1de:	88 23       	and	r24, r24
 1e0:	84 f5       	brge	.+96     	; 0x242 <MOTOR_Direction+0x10c>
			{
				if((Weight < 7) && (Weight > -7)) OCR1B = 4999 * 0.28; // 가중치가 작을 경우 왼쪽 모터도 살짝 돌려준다.
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 ee       	ldi	r20, 0xE0	; 224
 1e8:	50 e4       	ldi	r21, 0x40	; 64
 1ea:	c7 01       	movw	r24, r14
 1ec:	b6 01       	movw	r22, r12
 1ee:	73 d3       	rcall	.+1766   	; 0x8d6 <__cmpsf2>
 1f0:	88 23       	and	r24, r24
 1f2:	74 f4       	brge	.+28     	; 0x210 <MOTOR_Direction+0xda>
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	40 ee       	ldi	r20, 0xE0	; 224
 1fa:	50 ec       	ldi	r21, 0xC0	; 192
 1fc:	c7 01       	movw	r24, r14
 1fe:	b6 01       	movw	r22, r12
 200:	b9 d4       	rcall	.+2418   	; 0xb74 <__gesf2>
 202:	18 16       	cp	r1, r24
 204:	2c f4       	brge	.+10     	; 0x210 <MOTOR_Direction+0xda>
 206:	87 e7       	ldi	r24, 0x77	; 119
 208:	95 e0       	ldi	r25, 0x05	; 5
 20a:	99 bd       	out	0x29, r25	; 41
 20c:	88 bd       	out	0x28, r24	; 40
 20e:	02 c0       	rjmp	.+4      	; 0x214 <MOTOR_Direction+0xde>
				else OCR1B = 0;
 210:	19 bc       	out	0x29, r1	; 41
 212:	18 bc       	out	0x28, r1	; 40
				OCR1A = (4999 * 0.26) - (4999 * 0.17 * (Weight / 15));
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	40 e7       	ldi	r20, 0x70	; 112
 21a:	51 e4       	ldi	r21, 0x41	; 65
 21c:	c7 01       	movw	r24, r14
 21e:	b6 01       	movw	r22, r12
 220:	5e d3       	rcall	.+1724   	; 0x8de <__divsf3>
 222:	2f e1       	ldi	r18, 0x1F	; 31
 224:	35 e7       	ldi	r19, 0x75	; 117
 226:	44 e5       	ldi	r20, 0x54	; 84
 228:	54 e4       	ldi	r21, 0x44	; 68
 22a:	a8 d4       	rcall	.+2384   	; 0xb7c <__mulsf3>
 22c:	9b 01       	movw	r18, r22
 22e:	ac 01       	movw	r20, r24
 230:	6e ea       	ldi	r22, 0xAE	; 174
 232:	77 e7       	ldi	r23, 0x77	; 119
 234:	82 ea       	ldi	r24, 0xA2	; 162
 236:	94 e4       	ldi	r25, 0x44	; 68
 238:	e9 d2       	rcall	.+1490   	; 0x80c <__subsf3>
 23a:	be d3       	rcall	.+1916   	; 0x9b8 <__fixunssfsi>
 23c:	7b bd       	out	0x2b, r23	; 43
 23e:	6a bd       	out	0x2a, r22	; 42
 240:	2d c0       	rjmp	.+90     	; 0x29c <MOTOR_Direction+0x166>
			}
			else // 좌회전
			{
				if((Weight < 7) && (Weight > -7)) OCR1A = 4999 * 0.28; // 가중치가 작을 경우 오른쪽 모터도 살짝 돌려준다.
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	40 ee       	ldi	r20, 0xE0	; 224
 248:	50 e4       	ldi	r21, 0x40	; 64
 24a:	c7 01       	movw	r24, r14
 24c:	b6 01       	movw	r22, r12
 24e:	43 d3       	rcall	.+1670   	; 0x8d6 <__cmpsf2>
 250:	88 23       	and	r24, r24
 252:	74 f4       	brge	.+28     	; 0x270 <MOTOR_Direction+0x13a>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 ee       	ldi	r20, 0xE0	; 224
 25a:	50 ec       	ldi	r21, 0xC0	; 192
 25c:	c7 01       	movw	r24, r14
 25e:	b6 01       	movw	r22, r12
 260:	89 d4       	rcall	.+2322   	; 0xb74 <__gesf2>
 262:	18 16       	cp	r1, r24
 264:	2c f4       	brge	.+10     	; 0x270 <MOTOR_Direction+0x13a>
 266:	87 e7       	ldi	r24, 0x77	; 119
 268:	95 e0       	ldi	r25, 0x05	; 5
 26a:	9b bd       	out	0x2b, r25	; 43
 26c:	8a bd       	out	0x2a, r24	; 42
 26e:	02 c0       	rjmp	.+4      	; 0x274 <MOTOR_Direction+0x13e>
				else OCR1A = 0;
 270:	1b bc       	out	0x2b, r1	; 43
				OCR1B = (4999 * 0.26) + (4999 * 0.17 * (Weight / 15));
 272:	1a bc       	out	0x2a, r1	; 42
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	40 e7       	ldi	r20, 0x70	; 112
 27a:	51 e4       	ldi	r21, 0x41	; 65
 27c:	c7 01       	movw	r24, r14
 27e:	b6 01       	movw	r22, r12
 280:	2e d3       	rcall	.+1628   	; 0x8de <__divsf3>
 282:	2f e1       	ldi	r18, 0x1F	; 31
 284:	35 e7       	ldi	r19, 0x75	; 117
 286:	44 e5       	ldi	r20, 0x54	; 84
 288:	54 e4       	ldi	r21, 0x44	; 68
 28a:	78 d4       	rcall	.+2288   	; 0xb7c <__mulsf3>
 28c:	2e ea       	ldi	r18, 0xAE	; 174
 28e:	37 e7       	ldi	r19, 0x77	; 119
 290:	42 ea       	ldi	r20, 0xA2	; 162
 292:	54 e4       	ldi	r21, 0x44	; 68
 294:	bc d2       	rcall	.+1400   	; 0x80e <__addsf3>
 296:	90 d3       	rcall	.+1824   	; 0x9b8 <__fixunssfsi>
 298:	79 bd       	out	0x29, r23	; 41
			}
		}
	}
	UART1_Transmit(' ');
 29a:	68 bd       	out	0x28, r22	; 40
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	24 df       	rcall	.-440    	; 0xe8 <UART1_Transmit>
	UART1_TransNum(line);
 2a0:	ce 01       	movw	r24, r28
 2a2:	d8 d0       	rcall	.+432    	; 0x454 <UART1_TransNum>
 2a4:	c8 01       	movw	r24, r16
	return uturn; // uturn값을 반환
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	ff 90       	pop	r15
 2b0:	ef 90       	pop	r14
 2b2:	df 90       	pop	r13
 2b4:	cf 90       	pop	r12
 2b6:	08 95       	ret

000002b8 <ADC_INIT>:
 2b8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>

void ADC_INIT(){
	DDRF = 0x00;
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC Enable, 분주비 128
 2bc:	87 e8       	ldi	r24, 0x87	; 135
 2be:	86 b9       	out	0x06, r24	; 6
 2c0:	08 95       	ret

000002c2 <ADC_Receive>:
}

void ADC_Receive(int array[]){ // 8개의 adc값을 차례로 받아온다.
 2c2:	fc 01       	movw	r30, r24
 2c4:	90 e0       	ldi	r25, 0x00	; 0
	for(int i = 0; i < 8; i++)
	{
		ADCSRA |= (1<<ADSC);
 2c6:	36 9a       	sbi	0x06, 6	; 6
		ADMUX = i;
 2c8:	97 b9       	out	0x07, r25	; 7
		
		while(!(ADCSRA & (1<<ADIF)));
 2ca:	34 9b       	sbis	0x06, 4	; 6
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <ADC_Receive+0x8>
		array[i] = ADC;
 2ce:	24 b1       	in	r18, 0x04	; 4
 2d0:	35 b1       	in	r19, 0x05	; 5
 2d2:	21 93       	st	Z+, r18
 2d4:	31 93       	st	Z+, r19
 2d6:	9f 5f       	subi	r25, 0xFF	; 255
	DDRF = 0x00;
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC Enable, 분주비 128
}

void ADC_Receive(int array[]){ // 8개의 adc값을 차례로 받아온다.
	for(int i = 0; i < 8; i++)
 2d8:	98 30       	cpi	r25, 0x08	; 8
 2da:	a9 f7       	brne	.-22     	; 0x2c6 <ADC_Receive+0x4>
		ADMUX = i;
		
		while(!(ADCSRA & (1<<ADIF)));
		array[i] = ADC;
	}
}
 2dc:	08 95       	ret

000002de <__vector_1>:
int line_s = 0;
double sigma_R = 0;
double sigma_L = 0;

ISR(INT0_vect) // 버튼 0번을 누르면 Interrupt 0번 활성화
{
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
	button++; // 전역변수 button 1증가
 2ec:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <button>
 2f0:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <button+0x1>
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <button+0x1>
 2fa:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <button>
}
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <__vector_10>:

ISR(TIMER2_OVF_vect) // T/C2 사용 Overflow Interrupt Routine
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	2f 93       	push	r18
 318:	3f 93       	push	r19
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
	cnt++;
 31e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <cnt>
 322:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <cnt+0x1>
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <cnt+0x1>
 32c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <cnt>
	TCNT0 = 131; // 주기 2ms
 330:	83 e8       	ldi	r24, 0x83	; 131
 332:	82 bf       	out	0x32, r24	; 50
	
	if(cnt == 10) // 20ms 마다
 334:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <cnt>
 338:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <cnt+0x1>
 33c:	0a 97       	sbiw	r24, 0x0a	; 10
 33e:	c1 f5       	brne	.+112    	; 0x3b0 <__vector_10+0xa4>
	{
		cnt = 0;
 340:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <cnt+0x1>
 344:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cnt>
		timee++;
 348:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <timee>
 34c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <timee+0x1>
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <timee+0x1>
 356:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timee>
		if(line_s > 4) { flag0++; timee = 0; } // 검은줄로 가려진 센서가 5개 이상이면 flag0을 1증가, 시간 연장
 35a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <line_s>
 35e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <line_s+0x1>
 362:	85 30       	cpi	r24, 0x05	; 5
 364:	91 05       	cpc	r25, r1
 366:	74 f0       	brlt	.+28     	; 0x384 <__vector_10+0x78>
 368:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <flag0>
 36c:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <flag0+0x1>
 370:	2f 5f       	subi	r18, 0xFF	; 255
 372:	3f 4f       	sbci	r19, 0xFF	; 255
 374:	30 93 4d 01 	sts	0x014D, r19	; 0x80014d <flag0+0x1>
 378:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <flag0>
 37c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <timee+0x1>
 380:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <timee>
		if((line_s < 4) && (flag0 > 0)) { flag0 = 0; flag++; } // flag0이 0 이상이면서 검은줄로 가려진 센서가 5개 미만이면 flag를 1증가, flag0을 0으로 초기화
 384:	04 97       	sbiw	r24, 0x04	; 4
 386:	a4 f4       	brge	.+40     	; 0x3b0 <__vector_10+0xa4>
 388:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <flag0>
 38c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <flag0+0x1>
 390:	18 16       	cp	r1, r24
 392:	19 06       	cpc	r1, r25
 394:	6c f4       	brge	.+26     	; 0x3b0 <__vector_10+0xa4>
 396:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <flag0+0x1>
 39a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <flag0>
 39e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <flag>
 3a2:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <flag+0x1>
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <flag+0x1>
 3ac:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <flag>
		// 검은색 줄을 지나갈 때를 체크함
	}
	
	if(flag > 2) // flag가 3이상(짧은 시간 내에 줄을 3개 지났을 때)이면 
 3b0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <flag>
 3b4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <flag+0x1>
 3b8:	03 97       	sbiw	r24, 0x03	; 3
 3ba:	ac f1       	brlt	.+106    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		if(uturn == -1) // 이미 유턴을 한 경우 정지 (모터 출력핀을 끈다.)
 3bc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <uturn>
 3c0:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <uturn+0x1>
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	39 f4       	brne	.+14     	; 0x3d6 <__vector_10+0xca>
		{
			OCR1A = 0;
 3c8:	1b bc       	out	0x2b, r1	; 43
 3ca:	1a bc       	out	0x2a, r1	; 42
			OCR1B = 0;
 3cc:	19 bc       	out	0x29, r1	; 41
 3ce:	18 bc       	out	0x28, r1	; 40
			DDRE = 0x00;
 3d0:	12 b8       	out	0x02, r1	; 2
			DDRB = 0x00;
 3d2:	17 ba       	out	0x17, r1	; 23
 3d4:	28 c0       	rjmp	.+80     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		}
		else // 다음에 검은줄을 만났을 때 유턴
		{
			PORTE = 0x06;
 3d6:	86 e0       	ldi	r24, 0x06	; 6
 3d8:	83 b9       	out	0x03, r24	; 3
			OCR1A = 0;
 3da:	1b bc       	out	0x2b, r1	; 43
 3dc:	1a bc       	out	0x2a, r1	; 42
			OCR1B = 0;
 3de:	19 bc       	out	0x29, r1	; 41
 3e0:	18 bc       	out	0x28, r1	; 40
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	9b e7       	ldi	r25, 0x7B	; 123
 3e6:	22 e9       	ldi	r18, 0x92	; 146
 3e8:	81 50       	subi	r24, 0x01	; 1
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	20 40       	sbci	r18, 0x00	; 0
 3ee:	e1 f7       	brne	.-8      	; 0x3e8 <__vector_10+0xdc>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <__vector_10+0xe6>
 3f2:	00 00       	nop
			_delay_ms(3000);
			OCR1B = 4999 * 0.47;
 3f4:	8d e2       	ldi	r24, 0x2D	; 45
 3f6:	99 e0       	ldi	r25, 0x09	; 9
 3f8:	99 bd       	out	0x29, r25	; 41
 3fa:	88 bd       	out	0x28, r24	; 40
			OCR1A = 4999 * 0.47;
 3fc:	9b bd       	out	0x2b, r25	; 43
 3fe:	8a bd       	out	0x2a, r24	; 42
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	94 e3       	ldi	r25, 0x34	; 52
 404:	2c e0       	ldi	r18, 0x0C	; 12
 406:	81 50       	subi	r24, 0x01	; 1
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	20 40       	sbci	r18, 0x00	; 0
 40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 410:	00 00       	nop
			_delay_ms(250);
			flag = 0;
 412:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <flag+0x1>
 416:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <flag>
			uturn = 1;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <uturn+0x1>
 422:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <uturn>
		}
	}
	
	if(timee > 23) { timee = 0; flag = 0; } // 460ms가 지나도록 다음 검은줄을 지나지 못한다면 flag를 0으로 초기화
 426:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <timee>
 42a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <timee+0x1>
 42e:	48 97       	sbiw	r24, 0x18	; 24
 430:	44 f0       	brlt	.+16     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 432:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <timee+0x1>
 436:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <timee>
 43a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <flag+0x1>
 43e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <flag>
}
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	3f 91       	pop	r19
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <UART1_TransNum>:

void UART1_TransNum(int num) //숫자를 uart로 출력
{
 454:	af 92       	push	r10
 456:	bf 92       	push	r11
 458:	cf 92       	push	r12
 45a:	df 92       	push	r13
 45c:	ef 92       	push	r14
 45e:	ff 92       	push	r15
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	ec 01       	movw	r28, r24
	int j;
	if(num < 0)
 46a:	99 23       	and	r25, r25
 46c:	dc f4       	brge	.+54     	; 0x4a4 <UART1_TransNum+0x50>
	{
		UART1_Transmit('-');
 46e:	8d e2       	ldi	r24, 0x2D	; 45
 470:	3b de       	rcall	.-906    	; 0xe8 <UART1_Transmit>
		num = -num;
 472:	d1 95       	neg	r29
 474:	c1 95       	neg	r28
 476:	d1 09       	sbc	r29, r1
 478:	15 c0       	rjmp	.+42     	; 0x4a4 <UART1_TransNum+0x50>
	}
	for(j = 100 ; j > 0; j /= 10)
	{
		UART1_Transmit((num/j) + 48);
 47a:	ce 01       	movw	r24, r28
 47c:	b8 01       	movw	r22, r16
 47e:	e1 d3       	rcall	.+1986   	; 0xc42 <__divmodhi4>
 480:	c8 2e       	mov	r12, r24
 482:	d9 2e       	mov	r13, r25
 484:	80 e3       	ldi	r24, 0x30	; 48
 486:	86 0f       	add	r24, r22
 488:	2f de       	rcall	.-930    	; 0xe8 <UART1_Transmit>
		num %= j;
 48a:	cc 2d       	mov	r28, r12
	if(num < 0)
	{
		UART1_Transmit('-');
		num = -num;
	}
	for(j = 100 ; j > 0; j /= 10)
 48c:	dd 2d       	mov	r29, r13
 48e:	c8 01       	movw	r24, r16
 490:	b5 01       	movw	r22, r10
 492:	d7 d3       	rcall	.+1966   	; 0xc42 <__divmodhi4>
 494:	8b 01       	movw	r16, r22
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	e8 1a       	sub	r14, r24
 49a:	f1 08       	sbc	r15, r1
	{
		UART1_Transmit((num/j) + 48);
		num %= j;
	}
	UART1_Transmit(' ');
 49c:	71 f7       	brne	.-36     	; 0x47a <UART1_TransNum+0x26>
 49e:	80 e2       	ldi	r24, 0x20	; 32
 4a0:	23 de       	rcall	.-954    	; 0xe8 <UART1_Transmit>
}
 4a2:	0d c0       	rjmp	.+26     	; 0x4be <UART1_TransNum+0x6a>
	
	if(timee > 23) { timee = 0; flag = 0; } // 460ms가 지나도록 다음 검은줄을 지나지 못한다면 flag를 0으로 초기화
}

void UART1_TransNum(int num) //숫자를 uart로 출력
{
 4a4:	0f 2e       	mov	r0, r31
 4a6:	f3 e0       	ldi	r31, 0x03	; 3
 4a8:	ef 2e       	mov	r14, r31
 4aa:	f1 2c       	mov	r15, r1
 4ac:	f0 2d       	mov	r31, r0
 4ae:	04 e6       	ldi	r16, 0x64	; 100
 4b0:	10 e0       	ldi	r17, 0x00	; 0
	if(num < 0)
	{
		UART1_Transmit('-');
		num = -num;
	}
	for(j = 100 ; j > 0; j /= 10)
 4b2:	0f 2e       	mov	r0, r31
 4b4:	fa e0       	ldi	r31, 0x0A	; 10
 4b6:	af 2e       	mov	r10, r31
 4b8:	b1 2c       	mov	r11, r1
 4ba:	f0 2d       	mov	r31, r0
 4bc:	de cf       	rjmp	.-68     	; 0x47a <UART1_TransNum+0x26>
	{
		UART1_Transmit((num/j) + 48);
		num %= j;
	}
	UART1_Transmit(' ');
}
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	ff 90       	pop	r15
 4c8:	ef 90       	pop	r14
 4ca:	df 90       	pop	r13
 4cc:	cf 90       	pop	r12
 4ce:	bf 90       	pop	r11
 4d0:	af 90       	pop	r10
 4d2:	08 95       	ret

000004d4 <Normalization>:

void Normalization(int array[], int max[], int min[]){ 
 4d4:	2f 92       	push	r2
 4d6:	3f 92       	push	r3
 4d8:	6f 92       	push	r6
 4da:	7f 92       	push	r7
 4dc:	8f 92       	push	r8
 4de:	9f 92       	push	r9
 4e0:	af 92       	push	r10
 4e2:	bf 92       	push	r11
 4e4:	cf 92       	push	r12
 4e6:	df 92       	push	r13
 4e8:	ef 92       	push	r14
 4ea:	ff 92       	push	r15
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	00 d0       	rcall	.+0      	; 0x4f6 <Normalization+0x22>
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <Normalization+0x24>
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <Normalization+0x26>
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	5a 01       	movw	r10, r20
 500:	c6 2e       	mov	r12, r22
 502:	d7 2e       	mov	r13, r23
 504:	8c 01       	movw	r16, r24
 506:	8a e1       	ldi	r24, 0x1A	; 26
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	9e 83       	std	Y+6, r25	; 0x06
 50c:	8d 83       	std	Y+5, r24	; 0x05
 50e:	0f 2e       	mov	r0, r31
 510:	fa e2       	ldi	r31, 0x2A	; 42
 512:	2f 2e       	mov	r2, r31
 514:	f1 e0       	ldi	r31, 0x01	; 1
 516:	3f 2e       	mov	r3, r31
 518:	f0 2d       	mov	r31, r0
	for(int i = 0; i < 8; i++)
	{
		numerator = array[i] - min[i];
		denominator = max[i] - min[i];
		array[i] = (numerator / denominator) * 100; // ADC값 정규화
		if(array[i] <= 50) line[i] = 1; // 검은색이면 1 흰색이면 0으로 배열 line에 저장
 51a:	66 24       	eor	r6, r6
 51c:	63 94       	inc	r6
 51e:	71 2c       	mov	r7, r1
	double numerator = 0; // 분자
	double denominator = 0; // 분모
	
	for(int i = 0; i < 8; i++)
	{
		numerator = array[i] - min[i];
 520:	f5 01       	movw	r30, r10
 522:	e1 90       	ld	r14, Z+
 524:	f1 90       	ld	r15, Z+
 526:	5f 01       	movw	r10, r30
		denominator = max[i] - min[i];
 528:	f6 01       	movw	r30, r12
 52a:	81 90       	ld	r8, Z+
 52c:	91 90       	ld	r9, Z+
 52e:	6f 01       	movw	r12, r30
		array[i] = (numerator / denominator) * 100; // ADC값 정규화
 530:	f8 01       	movw	r30, r16
 532:	60 81       	ld	r22, Z
 534:	71 81       	ldd	r23, Z+1	; 0x01
 536:	6e 19       	sub	r22, r14
 538:	7f 09       	sbc	r23, r15
 53a:	07 2e       	mov	r0, r23
 53c:	00 0c       	add	r0, r0
 53e:	88 0b       	sbc	r24, r24
 540:	99 0b       	sbc	r25, r25
 542:	68 d2       	rcall	.+1232   	; 0xa14 <__floatsisf>
 544:	69 83       	std	Y+1, r22	; 0x01
 546:	7a 83       	std	Y+2, r23	; 0x02
 548:	8b 83       	std	Y+3, r24	; 0x03
 54a:	9c 83       	std	Y+4, r25	; 0x04
 54c:	b4 01       	movw	r22, r8
 54e:	6e 19       	sub	r22, r14
 550:	7f 09       	sbc	r23, r15
 552:	07 2e       	mov	r0, r23
 554:	00 0c       	add	r0, r0
 556:	88 0b       	sbc	r24, r24
 558:	99 0b       	sbc	r25, r25
 55a:	5c d2       	rcall	.+1208   	; 0xa14 <__floatsisf>
 55c:	9b 01       	movw	r18, r22
 55e:	ac 01       	movw	r20, r24
 560:	69 81       	ldd	r22, Y+1	; 0x01
 562:	7a 81       	ldd	r23, Y+2	; 0x02
 564:	8b 81       	ldd	r24, Y+3	; 0x03
 566:	9c 81       	ldd	r25, Y+4	; 0x04
 568:	ba d1       	rcall	.+884    	; 0x8de <__divsf3>
 56a:	20 e0       	ldi	r18, 0x00	; 0
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	48 ec       	ldi	r20, 0xC8	; 200
 570:	52 e4       	ldi	r21, 0x42	; 66
 572:	04 d3       	rcall	.+1544   	; 0xb7c <__mulsf3>
 574:	1c d2       	rcall	.+1080   	; 0x9ae <__fixsfsi>
 576:	f8 01       	movw	r30, r16
 578:	61 93       	st	Z+, r22
 57a:	71 93       	st	Z+, r23
 57c:	8f 01       	movw	r16, r30
		if(array[i] <= 50) line[i] = 1; // 검은색이면 1 흰색이면 0으로 배열 line에 저장
 57e:	63 33       	cpi	r22, 0x33	; 51
 580:	71 05       	cpc	r23, r1
 582:	2c f4       	brge	.+10     	; 0x58e <Normalization+0xba>
 584:	ed 81       	ldd	r30, Y+5	; 0x05
 586:	fe 81       	ldd	r31, Y+6	; 0x06
 588:	71 82       	std	Z+1, r7	; 0x01
 58a:	60 82       	st	Z, r6
 58c:	04 c0       	rjmp	.+8      	; 0x596 <Normalization+0xc2>
		else line[i] = 0;
 58e:	ed 81       	ldd	r30, Y+5	; 0x05
 590:	fe 81       	ldd	r31, Y+6	; 0x06
 592:	11 82       	std	Z+1, r1	; 0x01
 594:	10 82       	st	Z, r1
 596:	8d 81       	ldd	r24, Y+5	; 0x05
 598:	9e 81       	ldd	r25, Y+6	; 0x06
 59a:	02 96       	adiw	r24, 0x02	; 2
 59c:	9e 83       	std	Y+6, r25	; 0x06
 59e:	8d 83       	std	Y+5, r24	; 0x05

void Normalization(int array[], int max[], int min[]){ 
	double numerator = 0; // 분자
	double denominator = 0; // 분모
	
	for(int i = 0; i < 8; i++)
 5a0:	82 15       	cp	r24, r2
 5a2:	93 05       	cpc	r25, r3
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <Normalization+0xd4>
 5a6:	bc cf       	rjmp	.-136    	; 0x520 <Normalization+0x4c>
		denominator = max[i] - min[i];
		array[i] = (numerator / denominator) * 100; // ADC값 정규화
		if(array[i] <= 50) line[i] = 1; // 검은색이면 1 흰색이면 0으로 배열 line에 저장
		else line[i] = 0;
	}
}
 5a8:	26 96       	adiw	r28, 0x06	; 6
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	df 90       	pop	r13
 5c2:	cf 90       	pop	r12
 5c4:	bf 90       	pop	r11
 5c6:	af 90       	pop	r10
 5c8:	9f 90       	pop	r9
 5ca:	8f 90       	pop	r8
 5cc:	7f 90       	pop	r7
 5ce:	6f 90       	pop	r6
 5d0:	3f 90       	pop	r3
 5d2:	2f 90       	pop	r2
 5d4:	08 95       	ret

000005d6 <Weighted_Data_Processing>:

void Weighted_Data_Processing(){ // 가중치
 5d6:	cf 92       	push	r12
 5d8:	df 92       	push	r13
 5da:	ef 92       	push	r14
 5dc:	ff 92       	push	r15
 5de:	0f 93       	push	r16
 5e0:	1f 93       	push	r17
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	0a e1       	ldi	r16, 0x1A	; 26
 5e8:	11 e0       	ldi	r17, 0x01	; 1
 5ea:	c3 e0       	ldi	r28, 0x03	; 3
 5ec:	d0 e0       	ldi	r29, 0x00	; 0
 5ee:	c1 2c       	mov	r12, r1
 5f0:	d1 2c       	mov	r13, r1
 5f2:	76 01       	movw	r14, r12
	int j = 0;
	sigma_L = 0; // 좌측 ADC 가중치
	sigma_R = 0; //우측 ADC 가중치
	for(int i = 0; i < 4; i++) sigma_L -= (line[i] * (1<<(3 - i))); // -8, -4, -2, -1
 5f4:	f8 01       	movw	r30, r16
 5f6:	61 91       	ld	r22, Z+
 5f8:	71 91       	ld	r23, Z+
 5fa:	8f 01       	movw	r16, r30
 5fc:	0c 2e       	mov	r0, r28
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <Weighted_Data_Processing+0x2e>
 600:	66 0f       	add	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	0a 94       	dec	r0
 606:	e2 f7       	brpl	.-8      	; 0x600 <Weighted_Data_Processing+0x2a>
 608:	07 2e       	mov	r0, r23
 60a:	00 0c       	add	r0, r0
 60c:	88 0b       	sbc	r24, r24
 60e:	99 0b       	sbc	r25, r25
 610:	01 d2       	rcall	.+1026   	; 0xa14 <__floatsisf>
 612:	9b 01       	movw	r18, r22
 614:	ac 01       	movw	r20, r24
 616:	c7 01       	movw	r24, r14
 618:	b6 01       	movw	r22, r12
 61a:	f8 d0       	rcall	.+496    	; 0x80c <__subsf3>
 61c:	6b 01       	movw	r12, r22
 61e:	7c 01       	movw	r14, r24
 620:	21 97       	sbiw	r28, 0x01	; 1
 622:	40 f7       	brcc	.-48     	; 0x5f4 <Weighted_Data_Processing+0x1e>
 624:	c0 92 10 01 	sts	0x0110, r12	; 0x800110 <__data_end>
 628:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <__data_end+0x1>
 62c:	e0 92 12 01 	sts	0x0112, r14	; 0x800112 <__data_end+0x2>
 630:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <__data_end+0x3>
 634:	02 e2       	ldi	r16, 0x22	; 34
 636:	11 e0       	ldi	r17, 0x01	; 1
 638:	c0 e0       	ldi	r28, 0x00	; 0
 63a:	d0 e0       	ldi	r29, 0x00	; 0
 63c:	c1 2c       	mov	r12, r1
 63e:	d1 2c       	mov	r13, r1
 640:	76 01       	movw	r14, r12
	for(int i = 4; i < 8; i++) sigma_R += (line[i] * (1<<(i - 4))); // 1, 2, 4, 8
 642:	f8 01       	movw	r30, r16
 644:	61 91       	ld	r22, Z+
 646:	71 91       	ld	r23, Z+
 648:	8f 01       	movw	r16, r30
 64a:	0c 2e       	mov	r0, r28
 64c:	02 c0       	rjmp	.+4      	; 0x652 <Weighted_Data_Processing+0x7c>
 64e:	66 0f       	add	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	0a 94       	dec	r0
 654:	e2 f7       	brpl	.-8      	; 0x64e <Weighted_Data_Processing+0x78>
 656:	07 2e       	mov	r0, r23
 658:	00 0c       	add	r0, r0
 65a:	88 0b       	sbc	r24, r24
 65c:	99 0b       	sbc	r25, r25
 65e:	da d1       	rcall	.+948    	; 0xa14 <__floatsisf>
 660:	9b 01       	movw	r18, r22
 662:	ac 01       	movw	r20, r24
 664:	c7 01       	movw	r24, r14
 666:	b6 01       	movw	r22, r12
 668:	d2 d0       	rcall	.+420    	; 0x80e <__addsf3>
 66a:	6b 01       	movw	r12, r22
 66c:	7c 01       	movw	r14, r24
 66e:	21 96       	adiw	r28, 0x01	; 1
 670:	c4 30       	cpi	r28, 0x04	; 4
 672:	d1 05       	cpc	r29, r1
 674:	31 f7       	brne	.-52     	; 0x642 <Weighted_Data_Processing+0x6c>
 676:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <sigma_R>
 67a:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <sigma_R+0x1>
 67e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <sigma_R+0x2>
 682:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <sigma_R+0x3>
 	UART1_Transmit(' ');
 686:	80 e2       	ldi	r24, 0x20	; 32
 688:	2f dd       	rcall	.-1442   	; 0xe8 <UART1_Transmit>
	UART1_TransNum(sigma_R + sigma_L); // 총 가중치를 uart로 출력
 68a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 68e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
 692:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end+0x2>
 696:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x3>
 69a:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <sigma_R>
 69e:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <sigma_R+0x1>
 6a2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <sigma_R+0x2>
 6a6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <sigma_R+0x3>
 6aa:	b1 d0       	rcall	.+354    	; 0x80e <__addsf3>
 6ac:	80 d1       	rcall	.+768    	; 0x9ae <__fixsfsi>
 6ae:	cb 01       	movw	r24, r22
 6b0:	d1 de       	rcall	.-606    	; 0x454 <UART1_TransNum>
}
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	ff 90       	pop	r15
 6bc:	ef 90       	pop	r14
 6be:	df 90       	pop	r13
 6c0:	cf 90       	pop	r12
 6c2:	08 95       	ret

000006c4 <main>:

int main(void)
{
	DDRA = 0xff;
 6c4:	8f ef       	ldi	r24, 0xFF	; 255
 6c6:	8a bb       	out	0x1a, r24	; 26
	UART1_INIT();
 6c8:	ff dc       	rcall	.-1538   	; 0xc8 <UART1_INIT>
	MOTOR_INIT();
 6ca:	24 dd       	rcall	.-1464   	; 0x114 <MOTOR_INIT>
	ADC_INIT();
 6cc:	f5 dd       	rcall	.-1046   	; 0x2b8 <ADC_INIT>
	BUTTON_INIT();
 6ce:	1b dd       	rcall	.-1482   	; 0x106 <BUTTON_INIT>
 6d0:	13 dd       	rcall	.-1498   	; 0xf8 <Timer2_INIT>
	Timer2_INIT();
 6d2:	78 94       	sei
 6d4:	0f 2e       	mov	r0, r31
	
	sei();
 6d6:	fa e4       	ldi	r31, 0x4A	; 74
				if(adc_array[i] < adc_min[i]) adc_min[i] = adc_array[i];
			}
		}
		else if(button >= 2) // 버튼을 한 번 더 누르면
		{
			PORTA = ~(1 << flag);
 6d8:	8f 2e       	mov	r8, r31
 6da:	f1 e0       	ldi	r31, 0x01	; 1
 6dc:	9f 2e       	mov	r9, r31
 6de:	f0 2d       	mov	r31, r0
 6e0:	aa 24       	eor	r10, r10
 6e2:	a3 94       	inc	r10
 6e4:	b1 2c       	mov	r11, r1
 6e6:	0f 2e       	mov	r0, r31
 6e8:	fa e2       	ldi	r31, 0x2A	; 42
 6ea:	ef 2e       	mov	r14, r31
 6ec:	f1 e0       	ldi	r31, 0x01	; 1
 6ee:	ff 2e       	mov	r15, r31
 6f0:	f0 2d       	mov	r31, r0
 6f2:	0f 2e       	mov	r0, r31
 6f4:	f5 e5       	ldi	r31, 0x55	; 85
	{
		ADC_Receive(adc_array); // ADC값을 받아온다.
		
		if(button == 1) // 버튼을 한 번 누르면 ADC 최대 최소값 받음
		{
			PORTA = 0x55;
 6f6:	3f 2e       	mov	r3, r31
 6f8:	f0 2d       	mov	r31, r0
 6fa:	0f 2e       	mov	r0, r31
 6fc:	fa e3       	ldi	r31, 0x3A	; 58
 6fe:	cf 2e       	mov	r12, r31
 700:	f1 e0       	ldi	r31, 0x01	; 1
 702:	df 2e       	mov	r13, r31
 704:	f0 2d       	mov	r31, r0
 706:	8a e3       	ldi	r24, 0x3A	; 58
	
	sei();
	
	while (1)
	{
		ADC_Receive(adc_array); // ADC값을 받아온다.
 708:	91 e0       	ldi	r25, 0x01	; 1
 70a:	db dd       	rcall	.-1098   	; 0x2c2 <ADC_Receive>
 70c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <button>
		
		if(button == 1) // 버튼을 한 번 누르면 ADC 최대 최소값 받음
 710:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <button+0x1>
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	91 05       	cpc	r25, r1
 718:	f9 f4       	brne	.+62     	; 0x758 <main+0x94>
 71a:	3b ba       	out	0x1b, r3	; 27
 71c:	ca e3       	ldi	r28, 0x3A	; 58
		{
			PORTA = 0x55;
 71e:	d1 e0       	ldi	r29, 0x01	; 1
 720:	ea e2       	ldi	r30, 0x2A	; 42
 722:	f1 e0       	ldi	r31, 0x01	; 1
 724:	a0 e0       	ldi	r26, 0x00	; 0
 726:	b1 e0       	ldi	r27, 0x01	; 1
 728:	89 91       	ld	r24, Y+
 72a:	99 91       	ld	r25, Y+
			for(int i = 0; i < 8; i++)
			{
				if(adc_array[i] > adc_max[i]) adc_max[i] = adc_array[i];
 72c:	20 81       	ld	r18, Z
 72e:	31 81       	ldd	r19, Z+1	; 0x01
 730:	28 17       	cp	r18, r24
 732:	39 07       	cpc	r19, r25
 734:	14 f4       	brge	.+4      	; 0x73a <main+0x76>
 736:	91 83       	std	Z+1, r25	; 0x01
 738:	80 83       	st	Z, r24
 73a:	2d 91       	ld	r18, X+
 73c:	3c 91       	ld	r19, X
				if(adc_array[i] < adc_min[i]) adc_min[i] = adc_array[i];
 73e:	11 97       	sbiw	r26, 0x01	; 1
 740:	82 17       	cp	r24, r18
 742:	93 07       	cpc	r25, r19
 744:	1c f4       	brge	.+6      	; 0x74c <main+0x88>
 746:	11 96       	adiw	r26, 0x01	; 1
 748:	9c 93       	st	X, r25
 74a:	8e 93       	st	-X, r24
 74c:	32 96       	adiw	r30, 0x02	; 2
 74e:	12 96       	adiw	r26, 0x02	; 2
 750:	ec 15       	cp	r30, r12
 752:	fd 05       	cpc	r31, r13
		ADC_Receive(adc_array); // ADC값을 받아온다.
		
		if(button == 1) // 버튼을 한 번 누르면 ADC 최대 최소값 받음
		{
			PORTA = 0x55;
			for(int i = 0; i < 8; i++)
 754:	49 f7       	brne	.-46     	; 0x728 <main+0x64>
 756:	54 c0       	rjmp	.+168    	; 0x800 <main+0x13c>
 758:	02 97       	sbiw	r24, 0x02	; 2
 75a:	0c f4       	brge	.+2      	; 0x75e <main+0x9a>
			{
				if(adc_array[i] > adc_max[i]) adc_max[i] = adc_array[i];
				if(adc_array[i] < adc_min[i]) adc_min[i] = adc_array[i];
			}
		}
		else if(button >= 2) // 버튼을 한 번 더 누르면
 75c:	51 c0       	rjmp	.+162    	; 0x800 <main+0x13c>
 75e:	c5 01       	movw	r24, r10
 760:	f4 01       	movw	r30, r8
		{
			PORTA = ~(1 << flag);
 762:	00 80       	ld	r0, Z
 764:	02 c0       	rjmp	.+4      	; 0x76a <main+0xa6>
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	0a 94       	dec	r0
 76c:	e2 f7       	brpl	.-8      	; 0x766 <main+0xa2>
 76e:	80 95       	com	r24
 770:	8b bb       	out	0x1b, r24	; 27
 772:	40 e0       	ldi	r20, 0x00	; 0
 774:	51 e0       	ldi	r21, 0x01	; 1
			Normalization(adc_array, adc_max, adc_min); // 정규화
 776:	6a e2       	ldi	r22, 0x2A	; 42
 778:	71 e0       	ldi	r23, 0x01	; 1
 77a:	8a e3       	ldi	r24, 0x3A	; 58
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	aa de       	rcall	.-684    	; 0x4d4 <Normalization>
 780:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <line_s+0x1>
			line_s = 0;
 784:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <line_s>
 788:	ca e1       	ldi	r28, 0x1A	; 26
 78a:	d1 e0       	ldi	r29, 0x01	; 1
 78c:	8e 01       	movw	r16, r28
 78e:	88 81       	ld	r24, Y
			for(int i = 0; i < 8; i++)
			{
				UART1_Transmit(line[i] + 48); // 각 센서가 검은줄 위에 있는지 0/1로 uart로 출력
 790:	80 5d       	subi	r24, 0xD0	; 208
 792:	aa dc       	rcall	.-1708   	; 0xe8 <UART1_Transmit>
 794:	22 96       	adiw	r28, 0x02	; 2
 796:	f8 01       	movw	r30, r16
 798:	00 81       	ld	r16, Z
				line_s += line[i]; // 검은줄 위에 있는 수발광 센서의 수
 79a:	11 81       	ldd	r17, Z+1	; 0x01
 79c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <line_s>
 7a0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <line_s+0x1>
 7a4:	08 0f       	add	r16, r24
 7a6:	19 1f       	adc	r17, r25
 7a8:	10 93 19 01 	sts	0x0119, r17	; 0x800119 <line_s+0x1>
 7ac:	00 93 18 01 	sts	0x0118, r16	; 0x800118 <line_s>
 7b0:	ce 15       	cp	r28, r14
 7b2:	df 05       	cpc	r29, r15
		else if(button >= 2) // 버튼을 한 번 더 누르면
		{
			PORTA = ~(1 << flag);
			Normalization(adc_array, adc_max, adc_min); // 정규화
			line_s = 0;
			for(int i = 0; i < 8; i++)
 7b4:	59 f7       	brne	.-42     	; 0x78c <main+0xc8>
 7b6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <sigma_R>
			{
				UART1_Transmit(line[i] + 48); // 각 센서가 검은줄 위에 있는지 0/1로 uart로 출력
				line_s += line[i]; // 검은줄 위에 있는 수발광 센서의 수
			}
			if((sigma_L + sigma_R) != 0) uturn = MOTOR_Direction((sigma_R + sigma_L), line_s, uturn); // 가중치 가 0이 아닐 경우 모터 방향 변경
 7ba:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <sigma_R+0x1>
 7be:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <sigma_R+0x2>
 7c2:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <sigma_R+0x3>
 7c6:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 7ca:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 7ce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end+0x2>
 7d2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x3>
 7d6:	1b d0       	rcall	.+54     	; 0x80e <__addsf3>
 7d8:	2b 01       	movw	r4, r22
 7da:	3c 01       	movw	r6, r24
 7dc:	20 e0       	ldi	r18, 0x00	; 0
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	a9 01       	movw	r20, r18
 7e2:	79 d0       	rcall	.+242    	; 0x8d6 <__cmpsf2>
 7e4:	88 23       	and	r24, r24
 7e6:	61 f0       	breq	.+24     	; 0x800 <main+0x13c>
 7e8:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <uturn>
 7ec:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <uturn+0x1>
 7f0:	a8 01       	movw	r20, r16
 7f2:	c3 01       	movw	r24, r6
 7f4:	b2 01       	movw	r22, r4
 7f6:	9f dc       	rcall	.-1730   	; 0x136 <MOTOR_Direction>
 7f8:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <uturn+0x1>
 7fc:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <uturn>
			//uturn = MOTOR_Direction((sigma_R + sigma_L), line_s, uturn); // 수정
			// 문제점 1. 가중치가 0일 경우를 제외하였기 때문에 직진을 바르게 하지 못했음.
		}
		UART1_Transmit(' '); // 띄어쓰기
 800:	80 e2       	ldi	r24, 0x20	; 32
 802:	72 dc       	rcall	.-1820   	; 0xe8 <UART1_Transmit>
		Weighted_Data_Processing(); // 가중치
 804:	e8 de       	rcall	.-560    	; 0x5d6 <Weighted_Data_Processing>
 806:	8d e0       	ldi	r24, 0x0D	; 13
		UART1_Transmit(13); // uart 줄넘김
 808:	6f dc       	rcall	.-1826   	; 0xe8 <UART1_Transmit>
 80a:	7d cf       	rjmp	.-262    	; 0x706 <main+0x42>

0000080c <__subsf3>:
 80c:	50 58       	subi	r21, 0x80	; 128

0000080e <__addsf3>:
	}
 80e:	bb 27       	eor	r27, r27
 810:	aa 27       	eor	r26, r26
 812:	0e d0       	rcall	.+28     	; 0x830 <__addsf3x>
 814:	75 c1       	rjmp	.+746    	; 0xb00 <__fp_round>
 816:	66 d1       	rcall	.+716    	; 0xae4 <__fp_pscA>
 818:	30 f0       	brcs	.+12     	; 0x826 <__addsf3+0x18>
 81a:	6b d1       	rcall	.+726    	; 0xaf2 <__fp_pscB>
 81c:	20 f0       	brcs	.+8      	; 0x826 <__addsf3+0x18>
 81e:	31 f4       	brne	.+12     	; 0x82c <__addsf3+0x1e>
 820:	9f 3f       	cpi	r25, 0xFF	; 255
 822:	11 f4       	brne	.+4      	; 0x828 <__addsf3+0x1a>
 824:	1e f4       	brtc	.+6      	; 0x82c <__addsf3+0x1e>
 826:	5b c1       	rjmp	.+694    	; 0xade <__fp_nan>
 828:	0e f4       	brtc	.+2      	; 0x82c <__addsf3+0x1e>
 82a:	e0 95       	com	r30
 82c:	e7 fb       	bst	r30, 7
 82e:	51 c1       	rjmp	.+674    	; 0xad2 <__fp_inf>

00000830 <__addsf3x>:
 830:	e9 2f       	mov	r30, r25
 832:	77 d1       	rcall	.+750    	; 0xb22 <__fp_split3>
 834:	80 f3       	brcs	.-32     	; 0x816 <__addsf3+0x8>
 836:	ba 17       	cp	r27, r26
 838:	62 07       	cpc	r22, r18
 83a:	73 07       	cpc	r23, r19
 83c:	84 07       	cpc	r24, r20
 83e:	95 07       	cpc	r25, r21
 840:	18 f0       	brcs	.+6      	; 0x848 <__addsf3x+0x18>
 842:	71 f4       	brne	.+28     	; 0x860 <__addsf3x+0x30>
 844:	9e f5       	brtc	.+102    	; 0x8ac <__addsf3x+0x7c>
 846:	8f c1       	rjmp	.+798    	; 0xb66 <__fp_zero>
 848:	0e f4       	brtc	.+2      	; 0x84c <__addsf3x+0x1c>
 84a:	e0 95       	com	r30
 84c:	0b 2e       	mov	r0, r27
 84e:	ba 2f       	mov	r27, r26
 850:	a0 2d       	mov	r26, r0
 852:	0b 01       	movw	r0, r22
 854:	b9 01       	movw	r22, r18
 856:	90 01       	movw	r18, r0
 858:	0c 01       	movw	r0, r24
 85a:	ca 01       	movw	r24, r20
 85c:	a0 01       	movw	r20, r0
 85e:	11 24       	eor	r1, r1
 860:	ff 27       	eor	r31, r31
 862:	59 1b       	sub	r21, r25
 864:	99 f0       	breq	.+38     	; 0x88c <__addsf3x+0x5c>
 866:	59 3f       	cpi	r21, 0xF9	; 249
 868:	50 f4       	brcc	.+20     	; 0x87e <__addsf3x+0x4e>
 86a:	50 3e       	cpi	r21, 0xE0	; 224
 86c:	68 f1       	brcs	.+90     	; 0x8c8 <__addsf3x+0x98>
 86e:	1a 16       	cp	r1, r26
 870:	f0 40       	sbci	r31, 0x00	; 0
 872:	a2 2f       	mov	r26, r18
 874:	23 2f       	mov	r18, r19
 876:	34 2f       	mov	r19, r20
 878:	44 27       	eor	r20, r20
 87a:	58 5f       	subi	r21, 0xF8	; 248
 87c:	f3 cf       	rjmp	.-26     	; 0x864 <__addsf3x+0x34>
 87e:	46 95       	lsr	r20
 880:	37 95       	ror	r19
 882:	27 95       	ror	r18
 884:	a7 95       	ror	r26
 886:	f0 40       	sbci	r31, 0x00	; 0
 888:	53 95       	inc	r21
 88a:	c9 f7       	brne	.-14     	; 0x87e <__addsf3x+0x4e>
 88c:	7e f4       	brtc	.+30     	; 0x8ac <__addsf3x+0x7c>
 88e:	1f 16       	cp	r1, r31
 890:	ba 0b       	sbc	r27, r26
 892:	62 0b       	sbc	r22, r18
 894:	73 0b       	sbc	r23, r19
 896:	84 0b       	sbc	r24, r20
 898:	ba f0       	brmi	.+46     	; 0x8c8 <__addsf3x+0x98>
 89a:	91 50       	subi	r25, 0x01	; 1
 89c:	a1 f0       	breq	.+40     	; 0x8c6 <__addsf3x+0x96>
 89e:	ff 0f       	add	r31, r31
 8a0:	bb 1f       	adc	r27, r27
 8a2:	66 1f       	adc	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	c2 f7       	brpl	.-16     	; 0x89a <__addsf3x+0x6a>
 8aa:	0e c0       	rjmp	.+28     	; 0x8c8 <__addsf3x+0x98>
 8ac:	ba 0f       	add	r27, r26
 8ae:	62 1f       	adc	r22, r18
 8b0:	73 1f       	adc	r23, r19
 8b2:	84 1f       	adc	r24, r20
 8b4:	48 f4       	brcc	.+18     	; 0x8c8 <__addsf3x+0x98>
 8b6:	87 95       	ror	r24
 8b8:	77 95       	ror	r23
 8ba:	67 95       	ror	r22
 8bc:	b7 95       	ror	r27
 8be:	f7 95       	ror	r31
 8c0:	9e 3f       	cpi	r25, 0xFE	; 254
 8c2:	08 f0       	brcs	.+2      	; 0x8c6 <__addsf3x+0x96>
 8c4:	b3 cf       	rjmp	.-154    	; 0x82c <__addsf3+0x1e>
 8c6:	93 95       	inc	r25
 8c8:	88 0f       	add	r24, r24
 8ca:	08 f0       	brcs	.+2      	; 0x8ce <__addsf3x+0x9e>
 8cc:	99 27       	eor	r25, r25
 8ce:	ee 0f       	add	r30, r30
 8d0:	97 95       	ror	r25
 8d2:	87 95       	ror	r24
 8d4:	08 95       	ret

000008d6 <__cmpsf2>:
 8d6:	d9 d0       	rcall	.+434    	; 0xa8a <__fp_cmp>
 8d8:	08 f4       	brcc	.+2      	; 0x8dc <__cmpsf2+0x6>
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	08 95       	ret

000008de <__divsf3>:
 8de:	0c d0       	rcall	.+24     	; 0x8f8 <__divsf3x>
 8e0:	0f c1       	rjmp	.+542    	; 0xb00 <__fp_round>
 8e2:	07 d1       	rcall	.+526    	; 0xaf2 <__fp_pscB>
 8e4:	40 f0       	brcs	.+16     	; 0x8f6 <__divsf3+0x18>
 8e6:	fe d0       	rcall	.+508    	; 0xae4 <__fp_pscA>
 8e8:	30 f0       	brcs	.+12     	; 0x8f6 <__divsf3+0x18>
 8ea:	21 f4       	brne	.+8      	; 0x8f4 <__divsf3+0x16>
 8ec:	5f 3f       	cpi	r21, 0xFF	; 255
 8ee:	19 f0       	breq	.+6      	; 0x8f6 <__divsf3+0x18>
 8f0:	f0 c0       	rjmp	.+480    	; 0xad2 <__fp_inf>
 8f2:	51 11       	cpse	r21, r1
 8f4:	39 c1       	rjmp	.+626    	; 0xb68 <__fp_szero>
 8f6:	f3 c0       	rjmp	.+486    	; 0xade <__fp_nan>

000008f8 <__divsf3x>:
 8f8:	14 d1       	rcall	.+552    	; 0xb22 <__fp_split3>
 8fa:	98 f3       	brcs	.-26     	; 0x8e2 <__divsf3+0x4>

000008fc <__divsf3_pse>:
 8fc:	99 23       	and	r25, r25
 8fe:	c9 f3       	breq	.-14     	; 0x8f2 <__divsf3+0x14>
 900:	55 23       	and	r21, r21
 902:	b1 f3       	breq	.-20     	; 0x8f0 <__divsf3+0x12>
 904:	95 1b       	sub	r25, r21
 906:	55 0b       	sbc	r21, r21
 908:	bb 27       	eor	r27, r27
 90a:	aa 27       	eor	r26, r26
 90c:	62 17       	cp	r22, r18
 90e:	73 07       	cpc	r23, r19
 910:	84 07       	cpc	r24, r20
 912:	38 f0       	brcs	.+14     	; 0x922 <__divsf3_pse+0x26>
 914:	9f 5f       	subi	r25, 0xFF	; 255
 916:	5f 4f       	sbci	r21, 0xFF	; 255
 918:	22 0f       	add	r18, r18
 91a:	33 1f       	adc	r19, r19
 91c:	44 1f       	adc	r20, r20
 91e:	aa 1f       	adc	r26, r26
 920:	a9 f3       	breq	.-22     	; 0x90c <__divsf3_pse+0x10>
 922:	33 d0       	rcall	.+102    	; 0x98a <__divsf3_pse+0x8e>
 924:	0e 2e       	mov	r0, r30
 926:	3a f0       	brmi	.+14     	; 0x936 <__divsf3_pse+0x3a>
 928:	e0 e8       	ldi	r30, 0x80	; 128
 92a:	30 d0       	rcall	.+96     	; 0x98c <__divsf3_pse+0x90>
 92c:	91 50       	subi	r25, 0x01	; 1
 92e:	50 40       	sbci	r21, 0x00	; 0
 930:	e6 95       	lsr	r30
 932:	00 1c       	adc	r0, r0
 934:	ca f7       	brpl	.-14     	; 0x928 <__divsf3_pse+0x2c>
 936:	29 d0       	rcall	.+82     	; 0x98a <__divsf3_pse+0x8e>
 938:	fe 2f       	mov	r31, r30
 93a:	27 d0       	rcall	.+78     	; 0x98a <__divsf3_pse+0x8e>
 93c:	66 0f       	add	r22, r22
 93e:	77 1f       	adc	r23, r23
 940:	88 1f       	adc	r24, r24
 942:	bb 1f       	adc	r27, r27
 944:	26 17       	cp	r18, r22
 946:	37 07       	cpc	r19, r23
 948:	48 07       	cpc	r20, r24
 94a:	ab 07       	cpc	r26, r27
 94c:	b0 e8       	ldi	r27, 0x80	; 128
 94e:	09 f0       	breq	.+2      	; 0x952 <__divsf3_pse+0x56>
 950:	bb 0b       	sbc	r27, r27
 952:	80 2d       	mov	r24, r0
 954:	bf 01       	movw	r22, r30
 956:	ff 27       	eor	r31, r31
 958:	93 58       	subi	r25, 0x83	; 131
 95a:	5f 4f       	sbci	r21, 0xFF	; 255
 95c:	2a f0       	brmi	.+10     	; 0x968 <__divsf3_pse+0x6c>
 95e:	9e 3f       	cpi	r25, 0xFE	; 254
 960:	51 05       	cpc	r21, r1
 962:	68 f0       	brcs	.+26     	; 0x97e <__divsf3_pse+0x82>
 964:	b6 c0       	rjmp	.+364    	; 0xad2 <__fp_inf>
 966:	00 c1       	rjmp	.+512    	; 0xb68 <__fp_szero>
 968:	5f 3f       	cpi	r21, 0xFF	; 255
 96a:	ec f3       	brlt	.-6      	; 0x966 <__divsf3_pse+0x6a>
 96c:	98 3e       	cpi	r25, 0xE8	; 232
 96e:	dc f3       	brlt	.-10     	; 0x966 <__divsf3_pse+0x6a>
 970:	86 95       	lsr	r24
 972:	77 95       	ror	r23
 974:	67 95       	ror	r22
 976:	b7 95       	ror	r27
 978:	f7 95       	ror	r31
 97a:	9f 5f       	subi	r25, 0xFF	; 255
 97c:	c9 f7       	brne	.-14     	; 0x970 <__divsf3_pse+0x74>
 97e:	88 0f       	add	r24, r24
 980:	91 1d       	adc	r25, r1
 982:	96 95       	lsr	r25
 984:	87 95       	ror	r24
 986:	97 f9       	bld	r25, 7
 988:	08 95       	ret
 98a:	e1 e0       	ldi	r30, 0x01	; 1
 98c:	66 0f       	add	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	bb 1f       	adc	r27, r27
 994:	62 17       	cp	r22, r18
 996:	73 07       	cpc	r23, r19
 998:	84 07       	cpc	r24, r20
 99a:	ba 07       	cpc	r27, r26
 99c:	20 f0       	brcs	.+8      	; 0x9a6 <__divsf3_pse+0xaa>
 99e:	62 1b       	sub	r22, r18
 9a0:	73 0b       	sbc	r23, r19
 9a2:	84 0b       	sbc	r24, r20
 9a4:	ba 0b       	sbc	r27, r26
 9a6:	ee 1f       	adc	r30, r30
 9a8:	88 f7       	brcc	.-30     	; 0x98c <__divsf3_pse+0x90>
 9aa:	e0 95       	com	r30
 9ac:	08 95       	ret

000009ae <__fixsfsi>:
 9ae:	04 d0       	rcall	.+8      	; 0x9b8 <__fixunssfsi>
 9b0:	68 94       	set
 9b2:	b1 11       	cpse	r27, r1
 9b4:	d9 c0       	rjmp	.+434    	; 0xb68 <__fp_szero>
 9b6:	08 95       	ret

000009b8 <__fixunssfsi>:
 9b8:	bc d0       	rcall	.+376    	; 0xb32 <__fp_splitA>
 9ba:	88 f0       	brcs	.+34     	; 0x9de <__fixunssfsi+0x26>
 9bc:	9f 57       	subi	r25, 0x7F	; 127
 9be:	90 f0       	brcs	.+36     	; 0x9e4 <__fixunssfsi+0x2c>
 9c0:	b9 2f       	mov	r27, r25
 9c2:	99 27       	eor	r25, r25
 9c4:	b7 51       	subi	r27, 0x17	; 23
 9c6:	a0 f0       	brcs	.+40     	; 0x9f0 <__fixunssfsi+0x38>
 9c8:	d1 f0       	breq	.+52     	; 0x9fe <__fixunssfsi+0x46>
 9ca:	66 0f       	add	r22, r22
 9cc:	77 1f       	adc	r23, r23
 9ce:	88 1f       	adc	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	1a f0       	brmi	.+6      	; 0x9da <__fixunssfsi+0x22>
 9d4:	ba 95       	dec	r27
 9d6:	c9 f7       	brne	.-14     	; 0x9ca <__fixunssfsi+0x12>
 9d8:	12 c0       	rjmp	.+36     	; 0x9fe <__fixunssfsi+0x46>
 9da:	b1 30       	cpi	r27, 0x01	; 1
 9dc:	81 f0       	breq	.+32     	; 0x9fe <__fixunssfsi+0x46>
 9de:	c3 d0       	rcall	.+390    	; 0xb66 <__fp_zero>
 9e0:	b1 e0       	ldi	r27, 0x01	; 1
 9e2:	08 95       	ret
 9e4:	c0 c0       	rjmp	.+384    	; 0xb66 <__fp_zero>
 9e6:	67 2f       	mov	r22, r23
 9e8:	78 2f       	mov	r23, r24
 9ea:	88 27       	eor	r24, r24
 9ec:	b8 5f       	subi	r27, 0xF8	; 248
 9ee:	39 f0       	breq	.+14     	; 0x9fe <__fixunssfsi+0x46>
 9f0:	b9 3f       	cpi	r27, 0xF9	; 249
 9f2:	cc f3       	brlt	.-14     	; 0x9e6 <__fixunssfsi+0x2e>
 9f4:	86 95       	lsr	r24
 9f6:	77 95       	ror	r23
 9f8:	67 95       	ror	r22
 9fa:	b3 95       	inc	r27
 9fc:	d9 f7       	brne	.-10     	; 0x9f4 <__fixunssfsi+0x3c>
 9fe:	3e f4       	brtc	.+14     	; 0xa0e <__fixunssfsi+0x56>
 a00:	90 95       	com	r25
 a02:	80 95       	com	r24
 a04:	70 95       	com	r23
 a06:	61 95       	neg	r22
 a08:	7f 4f       	sbci	r23, 0xFF	; 255
 a0a:	8f 4f       	sbci	r24, 0xFF	; 255
 a0c:	9f 4f       	sbci	r25, 0xFF	; 255
 a0e:	08 95       	ret

00000a10 <__floatunsisf>:
 a10:	e8 94       	clt
 a12:	09 c0       	rjmp	.+18     	; 0xa26 <__floatsisf+0x12>

00000a14 <__floatsisf>:
 a14:	97 fb       	bst	r25, 7
 a16:	3e f4       	brtc	.+14     	; 0xa26 <__floatsisf+0x12>
 a18:	90 95       	com	r25
 a1a:	80 95       	com	r24
 a1c:	70 95       	com	r23
 a1e:	61 95       	neg	r22
 a20:	7f 4f       	sbci	r23, 0xFF	; 255
 a22:	8f 4f       	sbci	r24, 0xFF	; 255
 a24:	9f 4f       	sbci	r25, 0xFF	; 255
 a26:	99 23       	and	r25, r25
 a28:	a9 f0       	breq	.+42     	; 0xa54 <__floatsisf+0x40>
 a2a:	f9 2f       	mov	r31, r25
 a2c:	96 e9       	ldi	r25, 0x96	; 150
 a2e:	bb 27       	eor	r27, r27
 a30:	93 95       	inc	r25
 a32:	f6 95       	lsr	r31
 a34:	87 95       	ror	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	b7 95       	ror	r27
 a3c:	f1 11       	cpse	r31, r1
 a3e:	f8 cf       	rjmp	.-16     	; 0xa30 <__floatsisf+0x1c>
 a40:	fa f4       	brpl	.+62     	; 0xa80 <__floatsisf+0x6c>
 a42:	bb 0f       	add	r27, r27
 a44:	11 f4       	brne	.+4      	; 0xa4a <__floatsisf+0x36>
 a46:	60 ff       	sbrs	r22, 0
 a48:	1b c0       	rjmp	.+54     	; 0xa80 <__floatsisf+0x6c>
 a4a:	6f 5f       	subi	r22, 0xFF	; 255
 a4c:	7f 4f       	sbci	r23, 0xFF	; 255
 a4e:	8f 4f       	sbci	r24, 0xFF	; 255
 a50:	9f 4f       	sbci	r25, 0xFF	; 255
 a52:	16 c0       	rjmp	.+44     	; 0xa80 <__floatsisf+0x6c>
 a54:	88 23       	and	r24, r24
 a56:	11 f0       	breq	.+4      	; 0xa5c <__floatsisf+0x48>
 a58:	96 e9       	ldi	r25, 0x96	; 150
 a5a:	11 c0       	rjmp	.+34     	; 0xa7e <__floatsisf+0x6a>
 a5c:	77 23       	and	r23, r23
 a5e:	21 f0       	breq	.+8      	; 0xa68 <__floatsisf+0x54>
 a60:	9e e8       	ldi	r25, 0x8E	; 142
 a62:	87 2f       	mov	r24, r23
 a64:	76 2f       	mov	r23, r22
 a66:	05 c0       	rjmp	.+10     	; 0xa72 <__floatsisf+0x5e>
 a68:	66 23       	and	r22, r22
 a6a:	71 f0       	breq	.+28     	; 0xa88 <__floatsisf+0x74>
 a6c:	96 e8       	ldi	r25, 0x86	; 134
 a6e:	86 2f       	mov	r24, r22
 a70:	70 e0       	ldi	r23, 0x00	; 0
 a72:	60 e0       	ldi	r22, 0x00	; 0
 a74:	2a f0       	brmi	.+10     	; 0xa80 <__floatsisf+0x6c>
 a76:	9a 95       	dec	r25
 a78:	66 0f       	add	r22, r22
 a7a:	77 1f       	adc	r23, r23
 a7c:	88 1f       	adc	r24, r24
 a7e:	da f7       	brpl	.-10     	; 0xa76 <__floatsisf+0x62>
 a80:	88 0f       	add	r24, r24
 a82:	96 95       	lsr	r25
 a84:	87 95       	ror	r24
 a86:	97 f9       	bld	r25, 7
 a88:	08 95       	ret

00000a8a <__fp_cmp>:
 a8a:	99 0f       	add	r25, r25
 a8c:	00 08       	sbc	r0, r0
 a8e:	55 0f       	add	r21, r21
 a90:	aa 0b       	sbc	r26, r26
 a92:	e0 e8       	ldi	r30, 0x80	; 128
 a94:	fe ef       	ldi	r31, 0xFE	; 254
 a96:	16 16       	cp	r1, r22
 a98:	17 06       	cpc	r1, r23
 a9a:	e8 07       	cpc	r30, r24
 a9c:	f9 07       	cpc	r31, r25
 a9e:	c0 f0       	brcs	.+48     	; 0xad0 <__fp_cmp+0x46>
 aa0:	12 16       	cp	r1, r18
 aa2:	13 06       	cpc	r1, r19
 aa4:	e4 07       	cpc	r30, r20
 aa6:	f5 07       	cpc	r31, r21
 aa8:	98 f0       	brcs	.+38     	; 0xad0 <__fp_cmp+0x46>
 aaa:	62 1b       	sub	r22, r18
 aac:	73 0b       	sbc	r23, r19
 aae:	84 0b       	sbc	r24, r20
 ab0:	95 0b       	sbc	r25, r21
 ab2:	39 f4       	brne	.+14     	; 0xac2 <__fp_cmp+0x38>
 ab4:	0a 26       	eor	r0, r26
 ab6:	61 f0       	breq	.+24     	; 0xad0 <__fp_cmp+0x46>
 ab8:	23 2b       	or	r18, r19
 aba:	24 2b       	or	r18, r20
 abc:	25 2b       	or	r18, r21
 abe:	21 f4       	brne	.+8      	; 0xac8 <__fp_cmp+0x3e>
 ac0:	08 95       	ret
 ac2:	0a 26       	eor	r0, r26
 ac4:	09 f4       	brne	.+2      	; 0xac8 <__fp_cmp+0x3e>
 ac6:	a1 40       	sbci	r26, 0x01	; 1
 ac8:	a6 95       	lsr	r26
 aca:	8f ef       	ldi	r24, 0xFF	; 255
 acc:	81 1d       	adc	r24, r1
 ace:	81 1d       	adc	r24, r1
 ad0:	08 95       	ret

00000ad2 <__fp_inf>:
 ad2:	97 f9       	bld	r25, 7
 ad4:	9f 67       	ori	r25, 0x7F	; 127
 ad6:	80 e8       	ldi	r24, 0x80	; 128
 ad8:	70 e0       	ldi	r23, 0x00	; 0
 ada:	60 e0       	ldi	r22, 0x00	; 0
 adc:	08 95       	ret

00000ade <__fp_nan>:
 ade:	9f ef       	ldi	r25, 0xFF	; 255
 ae0:	80 ec       	ldi	r24, 0xC0	; 192
 ae2:	08 95       	ret

00000ae4 <__fp_pscA>:
 ae4:	00 24       	eor	r0, r0
 ae6:	0a 94       	dec	r0
 ae8:	16 16       	cp	r1, r22
 aea:	17 06       	cpc	r1, r23
 aec:	18 06       	cpc	r1, r24
 aee:	09 06       	cpc	r0, r25
 af0:	08 95       	ret

00000af2 <__fp_pscB>:
 af2:	00 24       	eor	r0, r0
 af4:	0a 94       	dec	r0
 af6:	12 16       	cp	r1, r18
 af8:	13 06       	cpc	r1, r19
 afa:	14 06       	cpc	r1, r20
 afc:	05 06       	cpc	r0, r21
 afe:	08 95       	ret

00000b00 <__fp_round>:
 b00:	09 2e       	mov	r0, r25
 b02:	03 94       	inc	r0
 b04:	00 0c       	add	r0, r0
 b06:	11 f4       	brne	.+4      	; 0xb0c <__fp_round+0xc>
 b08:	88 23       	and	r24, r24
 b0a:	52 f0       	brmi	.+20     	; 0xb20 <__fp_round+0x20>
 b0c:	bb 0f       	add	r27, r27
 b0e:	40 f4       	brcc	.+16     	; 0xb20 <__fp_round+0x20>
 b10:	bf 2b       	or	r27, r31
 b12:	11 f4       	brne	.+4      	; 0xb18 <__fp_round+0x18>
 b14:	60 ff       	sbrs	r22, 0
 b16:	04 c0       	rjmp	.+8      	; 0xb20 <__fp_round+0x20>
 b18:	6f 5f       	subi	r22, 0xFF	; 255
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255
 b1c:	8f 4f       	sbci	r24, 0xFF	; 255
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	08 95       	ret

00000b22 <__fp_split3>:
 b22:	57 fd       	sbrc	r21, 7
 b24:	90 58       	subi	r25, 0x80	; 128
 b26:	44 0f       	add	r20, r20
 b28:	55 1f       	adc	r21, r21
 b2a:	59 f0       	breq	.+22     	; 0xb42 <__fp_splitA+0x10>
 b2c:	5f 3f       	cpi	r21, 0xFF	; 255
 b2e:	71 f0       	breq	.+28     	; 0xb4c <__fp_splitA+0x1a>
 b30:	47 95       	ror	r20

00000b32 <__fp_splitA>:
 b32:	88 0f       	add	r24, r24
 b34:	97 fb       	bst	r25, 7
 b36:	99 1f       	adc	r25, r25
 b38:	61 f0       	breq	.+24     	; 0xb52 <__fp_splitA+0x20>
 b3a:	9f 3f       	cpi	r25, 0xFF	; 255
 b3c:	79 f0       	breq	.+30     	; 0xb5c <__fp_splitA+0x2a>
 b3e:	87 95       	ror	r24
 b40:	08 95       	ret
 b42:	12 16       	cp	r1, r18
 b44:	13 06       	cpc	r1, r19
 b46:	14 06       	cpc	r1, r20
 b48:	55 1f       	adc	r21, r21
 b4a:	f2 cf       	rjmp	.-28     	; 0xb30 <__fp_split3+0xe>
 b4c:	46 95       	lsr	r20
 b4e:	f1 df       	rcall	.-30     	; 0xb32 <__fp_splitA>
 b50:	08 c0       	rjmp	.+16     	; 0xb62 <__fp_splitA+0x30>
 b52:	16 16       	cp	r1, r22
 b54:	17 06       	cpc	r1, r23
 b56:	18 06       	cpc	r1, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	f1 cf       	rjmp	.-30     	; 0xb3e <__fp_splitA+0xc>
 b5c:	86 95       	lsr	r24
 b5e:	71 05       	cpc	r23, r1
 b60:	61 05       	cpc	r22, r1
 b62:	08 94       	sec
 b64:	08 95       	ret

00000b66 <__fp_zero>:
 b66:	e8 94       	clt

00000b68 <__fp_szero>:
 b68:	bb 27       	eor	r27, r27
 b6a:	66 27       	eor	r22, r22
 b6c:	77 27       	eor	r23, r23
 b6e:	cb 01       	movw	r24, r22
 b70:	97 f9       	bld	r25, 7
 b72:	08 95       	ret

00000b74 <__gesf2>:
 b74:	8a df       	rcall	.-236    	; 0xa8a <__fp_cmp>
 b76:	08 f4       	brcc	.+2      	; 0xb7a <__gesf2+0x6>
 b78:	8f ef       	ldi	r24, 0xFF	; 255
 b7a:	08 95       	ret

00000b7c <__mulsf3>:
 b7c:	0b d0       	rcall	.+22     	; 0xb94 <__mulsf3x>
 b7e:	c0 cf       	rjmp	.-128    	; 0xb00 <__fp_round>
 b80:	b1 df       	rcall	.-158    	; 0xae4 <__fp_pscA>
 b82:	28 f0       	brcs	.+10     	; 0xb8e <__mulsf3+0x12>
 b84:	b6 df       	rcall	.-148    	; 0xaf2 <__fp_pscB>
 b86:	18 f0       	brcs	.+6      	; 0xb8e <__mulsf3+0x12>
 b88:	95 23       	and	r25, r21
 b8a:	09 f0       	breq	.+2      	; 0xb8e <__mulsf3+0x12>
 b8c:	a2 cf       	rjmp	.-188    	; 0xad2 <__fp_inf>
 b8e:	a7 cf       	rjmp	.-178    	; 0xade <__fp_nan>
 b90:	11 24       	eor	r1, r1
 b92:	ea cf       	rjmp	.-44     	; 0xb68 <__fp_szero>

00000b94 <__mulsf3x>:
 b94:	c6 df       	rcall	.-116    	; 0xb22 <__fp_split3>
 b96:	a0 f3       	brcs	.-24     	; 0xb80 <__mulsf3+0x4>

00000b98 <__mulsf3_pse>:
 b98:	95 9f       	mul	r25, r21
 b9a:	d1 f3       	breq	.-12     	; 0xb90 <__mulsf3+0x14>
 b9c:	95 0f       	add	r25, r21
 b9e:	50 e0       	ldi	r21, 0x00	; 0
 ba0:	55 1f       	adc	r21, r21
 ba2:	62 9f       	mul	r22, r18
 ba4:	f0 01       	movw	r30, r0
 ba6:	72 9f       	mul	r23, r18
 ba8:	bb 27       	eor	r27, r27
 baa:	f0 0d       	add	r31, r0
 bac:	b1 1d       	adc	r27, r1
 bae:	63 9f       	mul	r22, r19
 bb0:	aa 27       	eor	r26, r26
 bb2:	f0 0d       	add	r31, r0
 bb4:	b1 1d       	adc	r27, r1
 bb6:	aa 1f       	adc	r26, r26
 bb8:	64 9f       	mul	r22, r20
 bba:	66 27       	eor	r22, r22
 bbc:	b0 0d       	add	r27, r0
 bbe:	a1 1d       	adc	r26, r1
 bc0:	66 1f       	adc	r22, r22
 bc2:	82 9f       	mul	r24, r18
 bc4:	22 27       	eor	r18, r18
 bc6:	b0 0d       	add	r27, r0
 bc8:	a1 1d       	adc	r26, r1
 bca:	62 1f       	adc	r22, r18
 bcc:	73 9f       	mul	r23, r19
 bce:	b0 0d       	add	r27, r0
 bd0:	a1 1d       	adc	r26, r1
 bd2:	62 1f       	adc	r22, r18
 bd4:	83 9f       	mul	r24, r19
 bd6:	a0 0d       	add	r26, r0
 bd8:	61 1d       	adc	r22, r1
 bda:	22 1f       	adc	r18, r18
 bdc:	74 9f       	mul	r23, r20
 bde:	33 27       	eor	r19, r19
 be0:	a0 0d       	add	r26, r0
 be2:	61 1d       	adc	r22, r1
 be4:	23 1f       	adc	r18, r19
 be6:	84 9f       	mul	r24, r20
 be8:	60 0d       	add	r22, r0
 bea:	21 1d       	adc	r18, r1
 bec:	82 2f       	mov	r24, r18
 bee:	76 2f       	mov	r23, r22
 bf0:	6a 2f       	mov	r22, r26
 bf2:	11 24       	eor	r1, r1
 bf4:	9f 57       	subi	r25, 0x7F	; 127
 bf6:	50 40       	sbci	r21, 0x00	; 0
 bf8:	8a f0       	brmi	.+34     	; 0xc1c <__mulsf3_pse+0x84>
 bfa:	e1 f0       	breq	.+56     	; 0xc34 <__mulsf3_pse+0x9c>
 bfc:	88 23       	and	r24, r24
 bfe:	4a f0       	brmi	.+18     	; 0xc12 <__mulsf3_pse+0x7a>
 c00:	ee 0f       	add	r30, r30
 c02:	ff 1f       	adc	r31, r31
 c04:	bb 1f       	adc	r27, r27
 c06:	66 1f       	adc	r22, r22
 c08:	77 1f       	adc	r23, r23
 c0a:	88 1f       	adc	r24, r24
 c0c:	91 50       	subi	r25, 0x01	; 1
 c0e:	50 40       	sbci	r21, 0x00	; 0
 c10:	a9 f7       	brne	.-22     	; 0xbfc <__mulsf3_pse+0x64>
 c12:	9e 3f       	cpi	r25, 0xFE	; 254
 c14:	51 05       	cpc	r21, r1
 c16:	70 f0       	brcs	.+28     	; 0xc34 <__mulsf3_pse+0x9c>
 c18:	5c cf       	rjmp	.-328    	; 0xad2 <__fp_inf>
 c1a:	a6 cf       	rjmp	.-180    	; 0xb68 <__fp_szero>
 c1c:	5f 3f       	cpi	r21, 0xFF	; 255
 c1e:	ec f3       	brlt	.-6      	; 0xc1a <__mulsf3_pse+0x82>
 c20:	98 3e       	cpi	r25, 0xE8	; 232
 c22:	dc f3       	brlt	.-10     	; 0xc1a <__mulsf3_pse+0x82>
 c24:	86 95       	lsr	r24
 c26:	77 95       	ror	r23
 c28:	67 95       	ror	r22
 c2a:	b7 95       	ror	r27
 c2c:	f7 95       	ror	r31
 c2e:	e7 95       	ror	r30
 c30:	9f 5f       	subi	r25, 0xFF	; 255
 c32:	c1 f7       	brne	.-16     	; 0xc24 <__mulsf3_pse+0x8c>
 c34:	fe 2b       	or	r31, r30
 c36:	88 0f       	add	r24, r24
 c38:	91 1d       	adc	r25, r1
 c3a:	96 95       	lsr	r25
 c3c:	87 95       	ror	r24
 c3e:	97 f9       	bld	r25, 7
 c40:	08 95       	ret

00000c42 <__divmodhi4>:
 c42:	97 fb       	bst	r25, 7
 c44:	07 2e       	mov	r0, r23
 c46:	16 f4       	brtc	.+4      	; 0xc4c <__divmodhi4+0xa>
 c48:	00 94       	com	r0
 c4a:	06 d0       	rcall	.+12     	; 0xc58 <__divmodhi4_neg1>
 c4c:	77 fd       	sbrc	r23, 7
 c4e:	08 d0       	rcall	.+16     	; 0xc60 <__divmodhi4_neg2>
 c50:	0b d0       	rcall	.+22     	; 0xc68 <__udivmodhi4>
 c52:	07 fc       	sbrc	r0, 7
 c54:	05 d0       	rcall	.+10     	; 0xc60 <__divmodhi4_neg2>
 c56:	3e f4       	brtc	.+14     	; 0xc66 <__divmodhi4_exit>

00000c58 <__divmodhi4_neg1>:
 c58:	90 95       	com	r25
 c5a:	81 95       	neg	r24
 c5c:	9f 4f       	sbci	r25, 0xFF	; 255
 c5e:	08 95       	ret

00000c60 <__divmodhi4_neg2>:
 c60:	70 95       	com	r23
 c62:	61 95       	neg	r22
 c64:	7f 4f       	sbci	r23, 0xFF	; 255

00000c66 <__divmodhi4_exit>:
 c66:	08 95       	ret

00000c68 <__udivmodhi4>:
 c68:	aa 1b       	sub	r26, r26
 c6a:	bb 1b       	sub	r27, r27
 c6c:	51 e1       	ldi	r21, 0x11	; 17
 c6e:	07 c0       	rjmp	.+14     	; 0xc7e <__udivmodhi4_ep>

00000c70 <__udivmodhi4_loop>:
 c70:	aa 1f       	adc	r26, r26
 c72:	bb 1f       	adc	r27, r27
 c74:	a6 17       	cp	r26, r22
 c76:	b7 07       	cpc	r27, r23
 c78:	10 f0       	brcs	.+4      	; 0xc7e <__udivmodhi4_ep>
 c7a:	a6 1b       	sub	r26, r22
 c7c:	b7 0b       	sbc	r27, r23

00000c7e <__udivmodhi4_ep>:
 c7e:	88 1f       	adc	r24, r24
 c80:	99 1f       	adc	r25, r25
 c82:	5a 95       	dec	r21
 c84:	a9 f7       	brne	.-22     	; 0xc70 <__udivmodhi4_loop>
 c86:	80 95       	com	r24
 c88:	90 95       	com	r25
 c8a:	bc 01       	movw	r22, r24
 c8c:	cd 01       	movw	r24, r26
 c8e:	08 95       	ret

00000c90 <_exit>:
 c90:	f8 94       	cli

00000c92 <__stop_program>:
 c92:	ff cf       	rjmp	.-2      	; 0xc92 <__stop_program>
